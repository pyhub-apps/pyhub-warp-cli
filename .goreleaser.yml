# GoReleaser configuration
# Documentation: https://goreleaser.com

# Set version using headver
version: 2

before:
  hooks:
    # Set version from headver
    - sh -c 'echo "Using version $(./scripts/headver.sh)"'
    # Run tests before building
    - go test ./...
    # Tidy go modules
    - go mod tidy

builds:
  - id: warp
    main: ./cmd/warp
    binary: warp
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    # Skip unsupported combinations (Windows ARM64 not widely supported yet)
    ignore:
      - goos: windows
        goarch: arm64
    # Inject version information at build time
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.gitCommit={{.Commit}}
      - -X main.buildDate={{.Date}}
    # Custom build tags for static binary
    tags:
      - netgo
      - osusergo

archives:
  - id: default
    name_template: >-
      {{ .ProjectName }}_
      {{- .Version }}_
      {{- if eq .Os "windows" }}Windows
      {{- else }}{{ title .Os }}{{ end }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
    format: tar.gz
    format_overrides:
      - goos: windows
        format: zip
    files:
      - README.md
      - LICENSE

checksum:
  name_template: 'checksums.txt'
  algorithm: sha256

snapshot:
  version_template: "{{ incpatch .Version }}-next"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - '^chore:'
      - '^ci:'
      - Merge pull request
      - Merge branch
  groups:
    - title: '🚀 Features'
      regexp: '^feat'
    - title: '🐛 Bug Fixes'
      regexp: '^fix'
    - title: '⚡ Performance'
      regexp: '^perf'
    - title: '♻️ Refactoring'
      regexp: '^refactor'

release:
  github:
    owner: pyhub-apps
    name: pyhub-warp-cli
  
  # Release name template
  name_template: "{{.ProjectName}} v{{.Version}}"
  
  # Publish release (set to false for draft releases)
  draft: false
  
  # Mark as prerelease for non-stable versions
  prerelease: auto
  
  # Release notes
  footer: |
    ## 📦 설치 방법 / Installation
    
    ### macOS (Apple Silicon M1/M2/M3)
    ```bash
    curl -LO https://github.com/pyhub-apps/pyhub-warp-cli/releases/download/v{{ .Version }}/warp_{{ .Version }}_Darwin_arm64.tar.gz
    tar -xzf warp_{{ .Version }}_Darwin_arm64.tar.gz
    sudo mv warp /usr/local/bin/
    warp version
    ```
    
    ### macOS (Intel)
    ```bash
    curl -LO https://github.com/pyhub-apps/pyhub-warp-cli/releases/download/v{{ .Version }}/warp_{{ .Version }}_Darwin_x86_64.tar.gz
    tar -xzf warp_{{ .Version }}_Darwin_x86_64.tar.gz
    sudo mv warp /usr/local/bin/
    warp version
    ```
    
    ### Windows (PowerShell)
    ```powershell
    # Download and extract
    Invoke-WebRequest -Uri https://github.com/pyhub-apps/pyhub-warp-cli/releases/download/v{{ .Version }}/warp_{{ .Version }}_Windows_x86_64.zip -OutFile warp.zip
    Expand-Archive -Path warp.zip -DestinationPath .
    
    # Add to PATH (run as Administrator)
    Move-Item warp.exe "C:\Program Files\warp\"
    [Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\Program Files\warp", [EnvironmentVariableTarget]::Machine)
    
    # Verify installation (new terminal required)
    warp version
    ```
    
    ### Linux (x86_64)
    ```bash
    curl -LO https://github.com/pyhub-apps/pyhub-warp-cli/releases/download/v{{ .Version }}/warp_{{ .Version }}_Linux_x86_64.tar.gz
    tar -xzf warp_{{ .Version }}_Linux_x86_64.tar.gz
    sudo mv warp /usr/local/bin/
    warp version
    ```
    
    ### Linux (ARM64)
    ```bash
    curl -LO https://github.com/pyhub-apps/pyhub-warp-cli/releases/download/v{{ .Version }}/warp_{{ .Version }}_Linux_arm64.tar.gz
    tar -xzf warp_{{ .Version }}_Linux_arm64.tar.gz
    sudo mv warp /usr/local/bin/
    warp version
    ```
    
    ## 🔧 초기 설정 / Configuration
    
    1. **API 키 발급 / Get API Key**
       - [국가법령정보센터 Open API](https://www.law.go.kr/LSW/openApi.do) 접속
       - 회원가입 후 인증키 발급
    
    2. **API 키 설정 / Set API Key**
       ```bash
       warp config set law.key YOUR_API_KEY
       ```
    
    ## 📖 사용 예제 / Usage Examples
    
    ```bash
    # 국가 법령 검색 / Search national laws
    warp law search "개인정보"
    
    # 자치 법규 검색 / Search local ordinances
    warp ordinance search "주차장"
    
    # 통합 검색 (국가법령 + 자치법규) / Unified search
    warp law search "환경" --source all
    
    # 법령 상세 조회 / View law details
    warp law detail 001234
    
    # 법령 연혁 조회 / View law history
    warp law history 001234
    
    # JSON 출력 / JSON output
    warp law search "도로교통법" --format json
    ```
    
    ## 📝 Changelog
    
    See below for detailed changes in this release.